{
  "hash": "5a17a8dd1d70aba5ed6c52d8474d9d53",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Transforma tus gráficos en Python: Técnicas para cambiar estilos y colores (parte 1)'\nauthor: Patricio Said\ndate: '2021-01-12'\nslug: personalizacion-de-grafica-python\ncategories: [\"python\",\"matplotlib\" , \"seaborn\"]\ndescription: \"\"\nformat:\n  html:\n    toc: true\ndraft: false\n---\n\n\n\nEn este post, se explorará cómo crear y personalizar un gráfico de barras en Python utilizando las bibliotecas Pandas, Matplotlib y Seaborn. Se explicará desde la obtención y preparación de los datos hasta la personalización de la gráfica, incluyendo cambios en el tipo de letra, ordenamiento de los datos y la adición de texto complementario.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n```\n:::\n\n\n\n## Librerías\n\nAntes de comenzar, es importante conocer las librerías que utilizaremos. Se trabajarán con funciones de la librería Pandas para la manipulación de los datos y matplotlib con seaborn para la elaboración de la gráfica:\n\n-   Pandas: Librería para manipulación y análisis de datos estructurados. Nos permite trabajar con estructuras de datos como DataFrames.\n\n-   Matplotlib: Biblioteca básica para la creación de gráficos en Python. En este post se utilizará para la personalización de la gráfica (cambio de color, modificar los ejes, tipo de letra, etc.).\n\n-   Seaborn: Biblioteca basada en Matplotlib que ofrece una interfaz de alto nivel para la creación de gráficos estadísticos atractivos y complejos. Fácil y simple de usar, en pocas líneas de código es posible elaborar gráficas complejas.\n\n## Paso 1: Obtención de los datos\n\nLos datos están cargados en un google sheet, contiene la cantidad de contagios de una X enfermedad en distintos países.\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nurl_1 = \"https://drive.google.com/file/d/1chBndOfQob4OY2lUsQPoe3bOZUiixjOa/view?usp=sharing\"\npath_1 = 'https://drive.google.com/uc?export=download&id='+url_1.split('/')[-2] \ndf = pd.read_csv(path_1)\n```\n:::\n\n\n\n## Paso 2: Exploración de los datos\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Paises  Contagiados\n0   España       569457\n1    Chile      1088398\n2   Guinea      1302202\n3  Ecuador      1930001\n4    Rusia      2000091\n```\n\n\n:::\n:::\n\n\n\nDos columnas de datos, paises y la cantidad de contagiados. Creamos un gráfico de barras con seaborn:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nf, ax = plt.subplots() # Crear la figura y los ejes con un tamaño específico\nsns.barplot(y = \"Paises\" , x = \"Contagiados\" , data = df ,\n            color = \"r\", alpha = .8)\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nSe observa en la gráfica que la cantidad de contagiados está ordenado de menor a mayor y en el eje X la cantidad de contagiados se transformó a notación científica.\n\n## Paso 3: Preparación de los datos.\n\nModificaremos la cantidad para mostrarlo en \"millones\" y ordenaremos los datos para que aparezcan de mayor a menor, esto para facilitar la lectura y compresión del gráfico.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf= df.sort_values(by=[\"Contagiados\"], ascending=False )\ndf[\"Contagiados\"] = df[\"Contagiados\"]/1000000\nx = df[\"Contagiados\"].sum()*1000000\ndf.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Paises  Contagiados\n19   México    10.327423\n18    Japón    10.248705\n17  Francia     9.776457\n16   Canadá     7.506864\n15    India     7.498847\n```\n\n\n:::\n:::\n\n\n\nEn la variable `x` se almacenó la cantidad total de contagiados, este dato lo utilizaremos más adelante.\n\n## Paso 4: Modificación del estilo\n\n### Tipo de letra\n\nConfiguramos el tipo de letra que se utilizará en el gráfico estableciendo `font.family` en 'Segoe UI'.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.rcParams['font.family'] = 'Segoe UI'\n```\n:::\n\n\n\n### Personalización de los ejes\n\n-   Límites del Eje X: Ajustamos el límite máximo del eje x a 10.4 millones para asegurar que todas las barras se muestren correctamente.\n\n-   Etiquetas de los Ejes: Añadimos una etiqueta al eje x y dejamos el eje y sin etiqueta. También ajustamos el tamaño y color de las etiquetas de los ejes para mejorar la legibilidad.\n\n-   Cambio de color: '#4D4D4D' es un color gris oscuro (por gusto personal).\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Configurar límites y etiquetas de los ejes\nax.set_xlim(0, 10.4)\nax.set_xlabel(\"Millones de contagios\", fontsize=14, color='#4D4D4D')\nax.set_ylabel(\"\", fontsize=0)\n\n# Ajustar el tamaño y color de las etiquetas del eje x e y\nax.tick_params(axis='y', labelsize=14, colors='#4D4D4D')\nax.tick_params(axis='x', labelsize=14, colors='#4D4D4D')\n```\n:::\n\n\n\n### Personalización de los bordes del gráfico\n\nDejo visible solo el eje inferior y el lateral izquierdo:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Eliminar ejes superiores y derechos\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# Cambiar el color de los ejes inferiores e izquierdos\nax.spines['bottom'].set_color('#4D4D4D') \nax.spines['left'].set_color('#4D4D4D') \n```\n:::\n\n\n\n### Añadir etiquetas de valor a las barras\n\nAñadimos etiquetas de valor dentro de cada barra para que muestran el número de contagiados en millones, con un decimal y utilizando una coma como separador decimal. El texto se posicionará al final de la barra, alineado a la derecha. Utilizamos color blanco y negrita para asegurar que el texto sea legible sobre el fondo rojo de las barras.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Añadir etiquetas de valor a cada barra dentro de la barra al final\nfor patch in ax.patches:\n    width = patch.get_width()\n    y = patch.get_y() + patch.get_height() / 2\n    \n    # Convertir el número a string con coma como separador decimal\n    formatted_width = f'{width:.1f}'.replace('.', ',')\n    # Posicionar el texto ligeramente dentro de la barra\n    ax.text(\n        width - 0.1,  # Desplazamiento hacia la izquierda para estar dentro\n        y,\n        f'{formatted_width} M',  # Usar el valor con coma\n        ha='right',  # Alinear el texto a la derecha para que quede al final\n        va='center',\n        color=\"white\",\n        fontweight='bold',\n        fontsize=12\n    )\n```\n:::\n\n\n\n### Añadir títulos y texto complementario\n\nUtilizamos `plt.suptitle` para añadir un título principal al gráfico, ajustando su posición horizontal y vertical para que se alinee a la izquierda y no interfiera con el gráfico.\n\nAñadimos un texto dentro del gráfico que muestra el total de contagiados calculado previamente. Ajustamos su posición para que se sitúe dentro del área del gráfico sin superponerse a otros elementos.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Añadir título principal\nplt.suptitle(\n    'Total de contagios por país',\n    y=0.98,\n    horizontalalignment='left',\n    x=0.01,\n    fontsize=24,\n    fontweight=\"bold\",\n    color='#4D4D4D'\n)\n\n# Añadir texto adicional con la suma total de contagiados\nax.text(\n    7, 19,\n    f'Total de contagios: {int(x):,}'.replace(',', '.'),\n    color='grey',\n    fontsize=20,\n    fontweight='bold'\n)\n```\n:::\n\n\n\n## El resultado\n\n\n\n::: {.cell .column-screen}\n\n```{.python .cell-code}\nplt.rcParams['font.family'] = 'Segoe UI'\n#plt.rcParams['font.sans-serif'] = ['Arial']  # O cualquier fuente que prefieras\n\n# Crear la figura y los ejes\nfig, ax = plt.subplots(figsize=(15, 7), dpi=120) #editar tamaño del plot (está en gran tamaño para html)\n\n# cambiar fondo del plot\n#fig.patch.set_facecolor('#F5F5F5')  # Fondo exterior (alrededor del gráfico)\n#ax.set_facecolor('#F5F5F5')         # Fondo interior del gráfico\n\n# Crear la gráfica de barras\nsns.barplot(\n    y=\"Paises\",\n    x=\"Contagiados\",\n    data=df,\n    color=\"r\",\n    alpha=0.8,\n    ax=ax\n)\n\n# Configurar límites y etiquetas de los ejes\nax.set_xlim(0, 10.4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(0.0, 10.4)\n```\n\n\n:::\n\n```{.python .cell-code}\nax.set_xlabel(\"Millones de contagios\", fontsize=14, color='#4D4D4D')\nax.set_ylabel(\"\", fontsize=0)\n\n# Ajustar el tamaño y color de las etiquetas del eje x e y\nax.tick_params(axis='y', labelsize=14, colors='#4D4D4D')\nax.tick_params(axis='x', labelsize=14, colors='#4D4D4D')\n\n\n# Eliminar ehes específicas\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# cambiar de color ejes específicas\nax.spines['bottom'].set_color('#4D4D4D') \nax.spines['left'].set_color('#4D4D4D') \n\n# Añadir etiquetas de valor a cada barra dentro de la barra al final\nfor patch in ax.patches:\n    width = patch.get_width()\n    y = patch.get_y() + patch.get_height() / 2\n    \n    # Convertir el número a string con coma como separador decimal\n    formatted_width = f'{width:.1f}'.replace('.', ',')\n    # Posicionar el texto ligeramente dentro de la barra\n    ax.text(\n        width - 0.1,  # Desplazamiento hacia la izquierda para estar dentro\n        y,\n        f'{formatted_width} M',  # Usar el valor con coma\n        ha='right',  # Alinear el texto a la derecha para que quede al final\n        va='center',\n        color=\"white\",\n        fontweight='bold',\n        fontsize=12\n    )\n\n# Añadir título principal\nplt.suptitle(\n    'Total de contagios por país',\n    y=0.98,\n    horizontalalignment='left',\n    x=0.01,\n    fontsize=24,\n    fontweight=\"bold\",\n    color='#4D4D4D'\n)\n\n# Añadir texto adicional con la suma total de contagiados\nax.text(\n    7, 19,\n    f'Total de contagios: {int(x):,}'.replace(',', '.'),\n    color='grey',\n    fontsize=20,\n    fontweight='bold'\n)\n\n\nplt.tight_layout() #para ajustar el plot opupar el espacio\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=1440}\n:::\n:::\n\n\n\nLa personalización de gráficos es esencial para presentar datos de manera clara y efectiva. Al ajustar elementos como el tipo de letra, colores, etiquetas y añadir información complementaria, puedes mejorar significativamente la comprensión y el impacto visual de tus gráficos.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}