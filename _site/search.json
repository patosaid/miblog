[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sobre mi",
    "section": "",
    "text": "¡Hola! Soy Patricio Said, Ingeniero Civil Industrial, diplomado en Big Data y Machine Learning. Me apasiona la programación y el análisis de datos, utilizar la tecnología para mejorar la eficiencia de los procesos y la toma de decisiones informadas.\nFuera del mundo de los datos, disfruto cocinar la auténtica pizza napolitana y pintar al óleo. En esta página encontrarás mi blog con algunos de mis códigos que he utilizado referente a ciencia de datos."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Creando plano para mostrar el área geográfica de un estudio con estilo paper",
    "section": "",
    "text": "Es común mostrar dentro de la metodología de un trabajo el área geográfica de donde se realizó el estudio. Si no estas familiarizado con datos espaciales, aquí te muestro una alternativa de cómo mostrar la zona de estudio (en lugar de ir a GoogleMaps y sacar una screenshot).\nPrimero cargamos las librerias, readr para importar los datos y ggplot2 para graficar.\n\nlibrary(readr)\nlibrary(ggplot2)\n\nSegún la zona que deseas mostrar y el nivel de detalle (por ejemplo los límite de los estados/regiones o nombres de ciudades) requerirás de determinadas fuentes de datos. Los paquetes ggmap y rnaturalearth incluyen conjuntos de datos para plotear el mundo con los límites internacionales, pero a nivel de estado solo está disponible para Estados Unidos. Por lo anterior, en este post trabajo con los datos de GADM.\nPara este ejemplo, trabajo con datos de Chile en formato sf provenientes de https://www.gadm.org/download_country_v3.html. Puedes descargar los datos para otro país cambiando la URL del siguiente código.\nDescargamos los datos y graficamos:\n\ncl &lt;- readRDS(url(\"https://geodata.ucdavis.edu/gadm/gadm3.6/Rsf/gadm36_CHL_1_sf.rds\", \"rb\"))\n#class(cl) sf\n\nggplot(data = cl) +\n  geom_sf()\n\n\n\n\n\n\n\n\nYa tenemos el mapa completo de Chile y con sus regiones delimitadas. Para este ejemplo voy a determinar la zona de estudio desde la Región del Maule hasta la Región de los Ríos, pero tambíen quiero mostrar los alrededores para que el lector pueda ubicarse. Para esto voy a cambiar los límites de la gráfica, de manera de hacer un “zoom” en el mapa. Los límites de la gráfica se pueden modificar filtrando el conjunto de datos según las regiones que queremos mostrar o modificar los parámetros xlim y ylim con un par de coordenadas. Esta última alternativa es más artesanal pero también una solución simple si no tienes experiencia con objetos sf.\nEl par de coordenadas las puedes obtener desde OpenStreetMap o GoogleMaps.\nEl límite superior lo determiné en la coordenada (-27,-80) y el inferior en (-42,-67). En ggplot() queda de la siguiente forma:\n\nggplot(data = cl) +\n  geom_sf(fill =\"white\")+\n  coord_sf(xlim = c(-67, -80), ylim = c(-42, -27))\n\n\n\n\n\n\n\n\nCon geom_rect() dibujo un rectángulo:\n\nggplot(data = cl) +\n  geom_sf(fill =\"white\")+\n  coord_sf(xlim = c(-67, -80), ylim = c(-42, -27))+\n  geom_rect(xmin = -74.8, xmax = -70, ymin = -40.65, ymax = -34.7, \n            fill = NA, colour = \"black\", size = 1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nPara finalizar, con la librería ggspatial y su función annotation_north_arrow() se puede incluir una flecha. Y de manera rústica agrego manualmente algunos nombres de ciudades de referencia por medio de la función annotate().\n\nlibrary(ggspatial)\nggplot(data = cl) +\n  geom_sf(fill = \"white\") +\n  annotation_scale(location = \"bl\", width_hint = 0.7) +  # añadir barra de escala\n  annotation_north_arrow(location = \"bl\", which_north = \"true\",  # añadir flecha\n                         pad_x = unit(0, \"in\"), pad_y = unit(0.3, \"in\"),\n                         style = north_arrow_fancy_orienteering) +\n  coord_sf(xlim = c(-67, -80), ylim = c(-42, -28))+  #limite del mapa \n  geom_rect(xmin = -74.8, xmax = -70, ymin = -40.65, ymax = -34.7,  # añado un rectángulo de bordes negros\n            fill = NA, colour = \"black\", size = 1)+\n  annotate(geom = \"text\", label = \"O c é a n o   P a c í f i c o\",  # agrego texto para indicar zonas\n           x = -79, y = -34, fontface = \"italic\",\n           color = \"grey22\", size = 4, angle = 90)+\n  annotate(geom = \"text\", label = \"Coquimbo\",   # agrego ciudades\n           x = -71.34, y = -29.9,\n           color = \"grey22\", size = 3)+\n  annotate(geom = \"text\", label = \"Santiago\",  \n           x = -69.60, y = -33.43,\n           color = \"grey22\", size = 3)+\n  annotate(geom = \"text\", label = \"Los Ángeles\", \n           x = -71.24, y = -37.46,\n           color = \"grey22\", size = 3)+\n  annotate(geom = \"text\", label = \"Zona de estudio\",  \n           x = -75.4, y = -37.675, fontface = c(\"bold\"), angle = 90,\n           color = \"grey22\", size = 3)+\n  xlab(\"Longitud\") + ylab(\"Latitud\")+ # título  de los ejes\n  theme_bw()\n\n\n\n\n\n\n\n\nGuardamos la gráfica con ggsave():\n\nggsave(\"mapa.png\", width = 6, height = 8, dpi = \"screen\")\n\nTambién puedes mostrar el área de estudio de manera interactiva y simple mediante Leaftle:\n\nlibrary(leaflet)\nleaflet() %&gt;% addTiles() %&gt;% \n  setView(-77.344, -34.597, zoom = 5) %&gt;% \n    addRectangles(\n    lng1= -74.575, lat1=-34.886,  \n    lng2= -70.192, lat2=-40.830, \n    fillColor = \"transparent\") %&gt;% \n  addProviderTiles(providers$Stamen.Toner)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Transforma tus gráficos en Python: Técnicas para cambiar estilos y colores\n\n\n\n\n\n\npython\n\n\nmatplotlib\n\n\nseaborn\n\n\n\n\n\n\n\n\n\n12 ene 2021\n\n\nPatricio Said\n\n\n\n\n\n\n\n\n\n\n\n\nMostrar tablas estadisticas con kableExtra\n\n\n\n\n\n\nr\n\n\nrecursos\n\n\nkableExtra\n\n\n\n\n\n\n\n\n\n25 sept 2019\n\n\nPatricio Said\n\n\n\n\n\n\n\n\n\n\n\n\nGráfico interactivo de comunas de Chile\n\n\n\n\n\n\nggplot2\n\n\nmapa\n\n\ndplyr\n\n\nchilemapas\n\n\nsf\n\n\nleaflet\n\n\nr\n\n\n\n\n\n\n\n\n\n23 sept 2019\n\n\nPatricio Said\n\n\n\n\n\n\n\n\n\n\n\n\nCreando plano para mostrar el área geográfica de un estudio con estilo paper\n\n\n\n\n\n\nggplot2\n\n\nmapa\n\n\nr\n\n\n\n\n\n\n\n\n\n21 sept 2019\n\n\nPatricio Said\n\n\n\n\n\n\n\n\n\n\n\n\nHola mundo, mi primer post - material R\n\n\n\n\n\n\nr\n\n\nrecursos\n\n\n\n\n\n\n\n\n\n19 sept 2019\n\n\nPatricio Said\n\n\n\n\n\n\nNo hay resultados"
  },
  {
    "objectID": "index.html#sobre-mi",
    "href": "index.html#sobre-mi",
    "title": "Patricio Said",
    "section": "",
    "text": "¡Hola! Soy Patricio Said, Ingeniero Civil Industrial con diplomado en Big Data y Machine Learning. Me apasiona la programación y el análisis de datos, utilizar la tecnología para mejorar la eficiencia de los procesos y tomar decisiones informadas.\nFuera del mundo de los datos, disfruto cocinar la auténtica pizza napolitana y pintar al óleo. En esta página encontrarás algunos de mis proyectos favoritos de ciencia de datos."
  },
  {
    "objectID": "posts/primer-post/index.html",
    "href": "posts/primer-post/index.html",
    "title": "Hola mundo, mi primer post - material R",
    "section": "",
    "text": "Hola, este es mi primer post :)\nEste post tiene el objetivo de guardar y mostrar ordenadamente las fuentes de recursos que todo principiante en el mundo de R debiese conocer. Obviamente no nombraré todos los paquetes o libros que existen en torno a R, pero si los lugares donde dar los primeros pasos.\nEste compilado está inspirado en https://awesome-r.com/ (revísalo)."
  },
  {
    "objectID": "posts/primer-post/index.html#instalar-r",
    "href": "posts/primer-post/index.html#instalar-r",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Instalar R",
    "text": "Instalar R\n(No está de más decir que se debe instalar R desde páginas oficiales)\n\nR (base): https://cran.rstudio.com/\nRStudio: https://www.rstudio.com/products/rstudio/download/"
  },
  {
    "objectID": "posts/primer-post/index.html#paquetes",
    "href": "posts/primer-post/index.html#paquetes",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Paquetes",
    "text": "Paquetes\n\nLuego de la instalación de R, knitr y rmarkdown te ayudan a la generenación de documentos dinámicos.\ntidyverse, contenedor de varios paquetes, estos son algunos:\n\nreadr, para importar datos tabulados a R.\ndplyr, manipulación de datos.\ntidyr, cambiar la forma de los datos.\nstringr, trabajar con carácteres.\nlubridate, trabajar con fechas.\nmagrittr, uso de la pipa (%&gt;%).\nggplot2, para creación de gráficas.\n\ndata.table, manipulación rápida de gran cantidad de datos.\nPara la creación de gráficas interactivas:\n\nhighcharter, gráficos basados en Highcharts.\ndygraphs, para series de tiempo.\nplotly, gráficas interactivas con plotly.\nleaflet, mapas interactivos.\nhtmlwidgets, javascript para visualizar datos en R. (revisa los casos de usos, son inspiradores).\n\nshiny, para creación de aplicaciones web. (Ver awesome-rshiny para más recursos en shiny).\nkableExtra, mostrar tablas en formato latex y HTML.\n\nLos paquetes nombrados son los más básicos y con ellos se pueden hacer muchas cosas. Revisa Awesome-R, hay paquetes para todo… conectarse a bases de datos, API’s para extraer datos de páginas webs, optimización de problemas no lineales, análisis de datos espaciales, machine learning etc."
  },
  {
    "objectID": "posts/primer-post/index.html#libros",
    "href": "posts/primer-post/index.html#libros",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Libros",
    "text": "Libros\n\nR for Data Science (empeza por este!, lo están traduciendo al español: https://es.r4ds.hadley.nz/)\nAn Introduction to R\nColección de libros gratis en: https://cran.r-project.org/other-docs.html\nR Cookbook\nAdvanced R\nR Markdown: The Definitive Guide\nUC Business Analytics R Programming Guide\nData Wrangling with R\nBuilding Big Shiny Apps - A Workflow\nGeocomputation with R\n\n\nOtros libros de interés:\n\nBusiness Analytics with R\nPractical R for Mass Communication and Journalism\nMachine Learning with R and H2O\nFundamentals of Data Visualization\nBasic R for Finance\nR para profesionales de los datos: una introducción\nCiencia de Datos para Gente Sociable R en ciencias sociales\nStatistical Inference via Data Science"
  },
  {
    "objectID": "posts/primer-post/index.html#cheat-sheets",
    "href": "posts/primer-post/index.html#cheat-sheets",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Cheat Sheets",
    "text": "Cheat Sheets\n(Las chuletas o torpedos, resúmenes con las funciones más importantes de algunos paquetes, ver https://www.rstudio.com/resources/cheatsheets/)\n\nRStudio IDE\nBase R\nRMarkdown\nData Wrangling\nData Visualization con ggplot2\nInteractive Web Apps with shiny\nData import\nCiencia de datos en R con sparklyr\nRepo de cheatsheets"
  },
  {
    "objectID": "posts/primer-post/index.html#r-en-twitter",
    "href": "posts/primer-post/index.html#r-en-twitter",
    "title": "Hola mundo, mi primer post - material R",
    "section": "R en Twitter",
    "text": "R en Twitter\nTambién, si quieres estar al tanto de las novedades en R te aconsejo seguir a las siguientes cuentas (personalmente no uso RRSS, pero en twitter he encontrado información muy valiosa de la comunidad de R):\n\nR4DScommunity o R for Data Science.\ntidypod Podcast sobre visualización.\nR4DS_es, R más accesible en Latinoamérica, impulsan #DatosDeMiercoles\nLatinR, la comunidad Latina en R.\nRLadiesGlobal.\n\nDe igual forma te recomiendo seguir a los autores de los libros y paquetes que nombré arriba, como por ejemplo a Hadley Wickham autor del libro R for Data Science y desarrollador de la librería tidyverse, o Riva Quiroga exponente de la comunidad R en latinoamérica.\nTe recomiendo participar en Datos de miércoles, la versión en español de #tidytuesday, donde cada semana suben datos para que diferentes usuarios puedan compartir sus visualizaciones. He visto aportes increíbles!, es una buena oportunidad para compartir y conocer el trabajo de otros usuarios de R."
  },
  {
    "objectID": "posts/primer-post/index.html#nota-actualizar",
    "href": "posts/primer-post/index.html#nota-actualizar",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Nota: Actualizar",
    "text": "Nota: Actualizar\n(Post realizado en 2019, actualizar enlaces, agregar nuevos recursos)\n\nhttps://dreamrs.github.io/esquisse/articles/get-started.html\nhttps://smach.github.io/R4JournalismBook/HowDoI.html\nhttps://www.dreamrs.fr/\nhttps://cedricscherer.netlify.com/\nhttps://yintingchou.com/\nhttps://deanattali.com/blog/building-shiny-apps-tutorial/\nhttps://blog.rstudio.com/2018/02/06/tensorflow-for-r/\n\nhttps://www.brodrigues.co/\nhttp://www.nathancunn.com/\nhttps://bitsandbricks.github.io/\n\nhttp://www.thertrader.com/\n\nhttps://www.r-spatial.org/\n\nhttp://blog.danwin.com/"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Hola mundo, mi primer post - material R",
    "section": "",
    "text": "Hola, este es mi primer post :)\nEste post tiene el objetivo de guardar y mostrar ordenadamente las fuentes de recursos que todo principiante en el mundo de R debiese conocer. Obviamente no nombraré todos los paquetes o libros que existen en torno a R, pero si los lugares donde dar los primeros pasos.\nEste compilado está inspirado en https://awesome-r.com/ (revísalo)."
  },
  {
    "objectID": "posts/welcome/index.html#instalar-r",
    "href": "posts/welcome/index.html#instalar-r",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Instalar R",
    "text": "Instalar R\n(No está de más decir que se debe instalar R desde páginas oficiales)\n\nR (base): https://cran.rstudio.com/\nRStudio: https://www.rstudio.com/products/rstudio/download/"
  },
  {
    "objectID": "posts/welcome/index.html#paquetes",
    "href": "posts/welcome/index.html#paquetes",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Paquetes",
    "text": "Paquetes\n\nLuego de la instalación de R, knitr y rmarkdown te ayudan a la generenación de documentos dinámicos.\ntidyverse, contenedor de varios paquetes, estos son algunos:\n\nreadr, para importar datos tabulados a R.\ndplyr, manipulación de datos.\ntidyr, cambiar la forma de los datos.\nstringr, trabajar con carácteres.\nlubridate, trabajar con fechas.\nmagrittr, uso de la pipa (%&gt;%).\nggplot2, para creación de gráficas.\n\ndata.table, manipulación rápida de gran cantidad de datos.\nPara la creación de gráficas interactivas:\n\nhighcharter, gráficos basados en Highcharts.\ndygraphs, para series de tiempo.\nplotly, gráficas interactivas con plotly.\nleaflet, mapas interactivos.\nhtmlwidgets, javascript para visualizar datos en R. (revisa los casos de usos, son inspiradores).\n\nshiny, para creación de aplicaciones web. (Ver awesome-rshiny para más recursos en shiny).\nkableExtra, mostrar tablas en formato latex y HTML.\n\nLos paquetes nombrados son los más básicos y con ellos se pueden hacer muchas cosas. Revisa Awesome-R, hay paquetes para todo… conectarse a bases de datos, API’s para extraer datos de páginas webs, optimización de problemas no lineales, análisis de datos espaciales, machine learning etc."
  },
  {
    "objectID": "posts/welcome/index.html#libros",
    "href": "posts/welcome/index.html#libros",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Libros",
    "text": "Libros\n\nR for Data Science (empeza por este!, lo están traduciendo al español: https://es.r4ds.hadley.nz/)\nAn Introduction to R\nColección de libros gratis en: https://cran.r-project.org/other-docs.html\nR Cookbook\nAdvanced R\nR Markdown: The Definitive Guide\nUC Business Analytics R Programming Guide\nData Wrangling with R\nBuilding Big Shiny Apps - A Workflow\nGeocomputation with R\n\n\nOtros libros de interés:\n\nBusiness Analytics with R\nPractical R for Mass Communication and Journalism\nMachine Learning with R and H2O\nFundamentals of Data Visualization\nBasic R for Finance\nR para profesionales de los datos: una introducción\nCiencia de Datos para Gente Sociable R en ciencias sociales\nStatistical Inference via Data Science"
  },
  {
    "objectID": "posts/welcome/index.html#cheat-sheets",
    "href": "posts/welcome/index.html#cheat-sheets",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Cheat Sheets",
    "text": "Cheat Sheets\n(Las chuletas o torpedos, resúmenes con las funciones más importantes de algunos paquetes, ver https://www.rstudio.com/resources/cheatsheets/)\n\nRStudio IDE\nBase R\nRMarkdown\nData Wrangling\nData Visualization con ggplot2\nInteractive Web Apps with shiny\nData import\nCiencia de datos en R con sparklyr\nRepo de cheatsheets"
  },
  {
    "objectID": "posts/welcome/index.html#r-en-twitter",
    "href": "posts/welcome/index.html#r-en-twitter",
    "title": "Hola mundo, mi primer post - material R",
    "section": "R en Twitter",
    "text": "R en Twitter\nTambién, si quieres estar al tanto de las novedades en R te aconsejo seguir a las siguientes cuentas (personalmente no uso RRSS, pero en twitter he encontrado información muy valiosa de la comunidad de R):\n\nR4DScommunity o R for Data Science.\ntidypod Podcast sobre visualización.\nR4DS_es, R más accesible en Latinoamérica, impulsan #DatosDeMiercoles\nLatinR, la comunidad Latina en R.\nRLadiesGlobal.\n\nDe igual forma te recomiendo seguir a los autores de los libros y paquetes que nombré arriba, como por ejemplo a Hadley Wickham autor del libro R for Data Science y desarrollador de la librería tidyverse, o Riva Quiroga exponente de la comunidad R en latinoamérica.\nTe recomiendo participar en Datos de miércoles, la versión en español de #tidytuesday, donde cada semana suben datos para que diferentes usuarios puedan compartir sus visualizaciones. He visto aportes increíbles!, es una buena oportunidad para compartir y conocer el trabajo de otros usuarios de R."
  },
  {
    "objectID": "posts/welcome/index.html#nota-actualizar",
    "href": "posts/welcome/index.html#nota-actualizar",
    "title": "Hola mundo, mi primer post - material R",
    "section": "Nota: Actualizar",
    "text": "Nota: Actualizar\n(Post realizado en 2019, actualizar enlaces, agregar nuevos recursos)\n\nhttps://dreamrs.github.io/esquisse/articles/get-started.html\nhttps://smach.github.io/R4JournalismBook/HowDoI.html\nhttps://www.dreamrs.fr/\nhttps://cedricscherer.netlify.com/\nhttps://yintingchou.com/\nhttps://deanattali.com/blog/building-shiny-apps-tutorial/\nhttps://blog.rstudio.com/2018/02/06/tensorflow-for-r/\n\nhttps://www.brodrigues.co/\nhttp://www.nathancunn.com/\nhttps://bitsandbricks.github.io/\n\nhttp://www.thertrader.com/\n\nhttps://www.r-spatial.org/\n\nhttp://blog.danwin.com/"
  },
  {
    "objectID": "posts/comunas-chile/index.html",
    "href": "posts/comunas-chile/index.html",
    "title": "Gráfico interactivo de comunas de Chile",
    "section": "",
    "text": "Este es un ejercicio simple para visualizar información por comunas de Chile. A modo de ejemplo, se destacarán las comunas que poseen artículos en sus nombres (La Serena, El Quisco, Los Ángeles, La Ligua), pero este mismo código se puede aplicar fácilmente para visualizar otros tipos de datos (más interesantes), densidad poblacional, % desempleo, tasa de crímenes, etc.\nLos nombres y polígonos de las comunas de Chile estan disponibles en el paquete chilemapas desarrolado por Mauricio Vargas (Pachá). (Hay varias librerías que permiten obtener los detalles de las administraciones territoriales)\nEl paquete chilemapas dispone de varios conjuntos. El conjunto territorial_codes contiene los nombres de regiones, provincias y comunas, con sus respectivos id’s. Mientras que regions_map y communes_map contiene los polígonos (en clase sf) que servirán para graficar. (Personalmente, esta es la primera vez que trabajo con objetos de clase sf, por lo tanto los códigos a continuación son bien ligeros, perfecto para un ejercicio de principiantes).\n\nPrimero cargamos las librerías:\n\nlibrary(chilemapas) # para los datos\nlibrary(dplyr) # manipulación\nlibrary(stringr) # y para trabajar con carácteres\nlibrary(ggplot2) # graficas\nlibrary(leaflet) # mapa interactivo\n\n\n\nLos datos\nCreo un vector articulos que contiene (obviamente) los artículos y la variable datos que contiene las columnas de interés del conjunto de datos.\n\nNota: Puedes replicar este mismo ejercicio pero con otros carácteres, como por ejemplo “San”, “Santa”, de esta manera ver la influencia de la religión en los nombres de los lugares.\n\n\narticulos &lt;- c(\"la\", \"las\", \"el\", \"los\")\ndatos &lt;- codigos_territoriales %&gt;% select(codigo_comuna, nombre_comuna)\n\nCon mutate() creo una columna que contiene la primera palabra de los nombres de las comunas y con tolower transformo a minúscula, veamos el resultado con glimpse:\n\ndatos %&gt;% select(codigo_comuna, nombre_comuna) %&gt;%  \n  mutate(primera_palabra = tolower(str_extract(nombre_comuna, pattern = \"\\\\w+\"))) %&gt;% \n  glimpse\n\nRows: 346\nColumns: 3\n$ codigo_comuna   &lt;chr&gt; \"01101\", \"01107\", \"01401\", \"01402\", \"01403\", \"01404\", …\n$ nombre_comuna   &lt;chr&gt; \"Iquique\", \"Alto Hospicio\", \"Pozo Almonte\", \"Camina\", …\n$ primera_palabra &lt;chr&gt; \"iquique\", \"alto\", \"pozo\", \"camina\", \"colchane\", \"huar…\n\n\nAhora deseo agregar más información al conjunto. Con case_when() creé una columna para el tipo de género del artículo y de la misma forma indentifiqué si es un artículo plural o singular.\n\ndatos &lt;- datos %&gt;% select(codigo_comuna, nombre_comuna) %&gt;%  \n  mutate(primera_palabra = tolower(str_extract(nombre_comuna, pattern = \"\\\\w+\"))) %&gt;% \n  mutate(es_articulo = primera_palabra %in% articulos) %&gt;% \n  mutate(genero = case_when(\n    primera_palabra %in% c(\"la\", \"las\") ~ \"Femenino\",\n    primera_palabra %in% c(\"el\", \"los\") ~ \"Masculino\")) %&gt;% \n  mutate(cantidad = case_when(\n    primera_palabra %in% c(\"las\", \"los\") ~ \"Plural\",\n    primera_palabra %in% c(\"el\", \"la\") ~ \"Singular\" ))\n\nEso sería toda la parte de manipulación. Veamos un pequeño resumen de los datos con summarise().\n\n\nUn pequeño vistazo\nDe un total de 346 comunas solamente 25 inician con artículo. (Pocos!!!, pensaba que al menos el 20% comenzaba con artículos…). La proporción en el género son casi las mismas, mientras los artículos singulares superan a los plurales.\n\ndatos %&gt;% group_by(es_articulo)%&gt;% \n  summarise( N_articulo = n() , N_femeninos=sum(genero == \"Femenino\") ,  \n             N_masculinos = sum(genero==\"Masculino\"),\n             N_singular = sum(cantidad == \"Singular\"),\n             N_plural = sum(cantidad == \"Plural\")) \n\n# A tibble: 2 × 6\n  es_articulo N_articulo N_femeninos N_masculinos N_singular N_plural\n  &lt;lgl&gt;            &lt;int&gt;       &lt;int&gt;        &lt;int&gt;      &lt;int&gt;    &lt;int&gt;\n1 FALSE              321          NA           NA         NA       NA\n2 TRUE                25          13           12         16        9\n\n\n\n\nGraficando la Región de Coquimbo:\nEl conjunto mapa_comunas contiene los polígonos de las comunas por cada región.\n\nmapa_comunas_sf &lt;- st_as_sf(mapa_comunas)\ncoquimbo &lt;- mapa_comunas_sf %&gt;%\n  filter(codigo_region == \"04\") %&gt;%\n  left_join(\n    codigos_territoriales %&gt;%\n      select(codigo_comuna, nombre_comuna) %&gt;%\n      distinct(),\n    by = \"codigo_comuna\"  # Asegúrate de especificar la clave de unión correcta\n  ) %&gt;%\n  inner_join(datos)  # Ajusta la clave de unión según corresponda\n\nggplot(coquimbo) + \n  geom_sf(aes(fill = es_articulo)) +\n  geom_sf_label(aes(label = nombre_comuna))\n\n\n\n\n\n\n\n\n\n\nGraficando para todo el país\nPara graficar a todo Chile lo haré en un mapa interactivo ya que por la forma que tiene el país se hace difícil ver con claridad el color de cada comuna.\n\nchile &lt;- mapa_comunas %&gt;%\n  bind_rows() %&gt;%\n  left_join(\n    codigos_territoriales %&gt;%\n      select(codigo_comuna, nombre_comuna) %&gt;%\n      distinct(),\n    by = \"codigo_comuna\"  # Asegúrate de que este es el nombre correcto de la clave\n  ) %&gt;%\n  inner_join(datos, by = \"nombre_comuna\")  # Ajusta la clave de unión según corresponda\n\nEn addPolygons() por medio el parámetro popup especifiqué un vector en formato HTML para que al momento de cliquear sobre las comunas se despliegue un recuadro con información.\n\nchile &lt;- st_as_sf(chile)\nchile &lt;- chile %&gt;% select(-(codigo_provincia :codigo_region ))\nfactpal &lt;- colorFactor(heat.colors(3), chile$genero)\n\n\nleaflet() %&gt;% addTiles() %&gt;%  \n  addPolygons(data = chile,\n              color = ~factpal(genero),\n              fillOpacity = 0.8, stroke = FALSE,\n              popup = paste0( \n                  \"Comuna: \" , chile$nombre_comuna  , \"&lt;br&gt;\",\n                  \"Género del artículo: \", chile$genero,\"&lt;br&gt;\",\n                  \"Cantidad del artículo: \", chile$cantidad )\n              )"
  },
  {
    "objectID": "posts/tablas-estadisticas/index.html",
    "href": "posts/tablas-estadisticas/index.html",
    "title": "Mostrar tablas estadisticas con kableExtra",
    "section": "",
    "text": "En cualquier trabajo de investigación que involucre una muestra o conjunto de datos es importante mostrar un cuadro resumen que contenga estadísticas descriptivas del conjunto, de esta manera se puede comunicar de forma clara la dimensión de los datos del estudio.\nCon solo dos herramientas la construcción de tablas resúmnes resulta muy facil y sencilla. Las funciones de dplyr permiten calcular diferentes estadísticas según grupos. Una vez terminada la tabla el paquete kableExtra transforma facimente la información de la tabla a formato HTML o Latex (para visualizar en PDF)."
  },
  {
    "objectID": "posts/tablas-estadisticas/index.html#los-datos-a-usar",
    "href": "posts/tablas-estadisticas/index.html#los-datos-a-usar",
    "title": "Mostrar tablas estadisticas con kableExtra",
    "section": "Los datos a usar",
    "text": "Los datos a usar\nPara este ejemplo utilizo los datos vuelos que están dentro del paquete datos. vuelos es la traducción al español del conjunto nycflights13::flights. Este conjunto contiene los datos de los vuelos que despegaron de Nueva York durante el 2013.\n\nlibrary(datos)\nlibrary(tidyverse)\nvuelos\n\n# A tibble: 336,776 × 19\n    anio   mes   dia horario_salida salida_programada atraso_salida\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;          &lt;int&gt;             &lt;int&gt;         &lt;dbl&gt;\n 1  2013     1     1            517               515             2\n 2  2013     1     1            533               529             4\n 3  2013     1     1            542               540             2\n 4  2013     1     1            544               545            -1\n 5  2013     1     1            554               600            -6\n 6  2013     1     1            554               558            -4\n 7  2013     1     1            555               600            -5\n 8  2013     1     1            557               600            -3\n 9  2013     1     1            557               600            -3\n10  2013     1     1            558               600            -2\n# ℹ 336,766 more rows\n# ℹ 13 more variables: horario_llegada &lt;int&gt;, llegada_programada &lt;int&gt;,\n#   atraso_llegada &lt;dbl&gt;, aerolinea &lt;chr&gt;, vuelo &lt;int&gt;, codigo_cola &lt;chr&gt;,\n#   origen &lt;chr&gt;, destino &lt;chr&gt;, tiempo_vuelo &lt;dbl&gt;, distancia &lt;dbl&gt;,\n#   hora &lt;dbl&gt;, minuto &lt;dbl&gt;, fecha_hora &lt;dttm&gt;\n\n\nLos datos vienen en formato tibble. De manera de ejemplo y poder probar las agrupaciones de columnas y filas al momento de mostrar la tabla voy a filtrar el conjunto de datos en un rango de tres meses (septiembre a noviembre) y trabajar con los datos de las 3 aerolíneas con más vuelos."
  },
  {
    "objectID": "posts/tablas-estadisticas/index.html#preparando-los-datos",
    "href": "posts/tablas-estadisticas/index.html#preparando-los-datos",
    "title": "Mostrar tablas estadisticas con kableExtra",
    "section": "Preparando los datos",
    "text": "Preparando los datos\nmayores_aerolineas guarda las 3 aerolineas con mas vuelos:\n\nmayores_aerolineas &lt;- vuelos %&gt;% select(mes, aerolinea) %&gt;% \n  filter(mes %in% (9:11)) %&gt;% \n  group_by( aerolinea) %&gt;% \n    summarise(n = n()) %&gt;% \n  arrange(desc(n)) %&gt;% \n  slice(1:3) %&gt;% \n  ungroup()\n\n# Busca los nombres  \naerolineas %&gt;% \n  filter(aerolinea %in% mayores_aerolineas$aerolinea)\n\n# A tibble: 3 × 2\n  aerolinea nombre                  \n  &lt;chr&gt;     &lt;chr&gt;                   \n1 B6        JetBlue Airways         \n2 EV        ExpressJet Airlines Inc.\n3 UA        United Air Lines Inc.   \n\n\nEn datos guarda los datos a utilizar para este ejemplo.\n\ndatos &lt;- vuelos %&gt;% \n  select(mes, aerolinea, atraso_llegada, atraso_salida) %&gt;% \n  filter(atraso_salida &gt; 0 , atraso_llegada &gt; 0) %&gt;% \n  filter(mes &gt;=9, mes &lt;=11) %&gt;% \n  filter(aerolinea %in% mayores_aerolineas$aerolinea) %&gt;% \n  arrange(mes)\ndatos\n\n# A tibble: 8,688 × 4\n     mes aerolinea atraso_llegada atraso_salida\n   &lt;int&gt; &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;\n 1     9 B6                     3            10\n 2     9 B6                   139           152\n 3     9 EV                     8            11\n 4     9 B6                     9             2\n 5     9 B6                    13            18\n 6     9 B6                    46            57\n 7     9 EV                    61            80\n 8     9 EV                     4            25\n 9     9 UA                    16            50\n10     9 EV                    30            38\n# ℹ 8,678 more rows\n\n\nDe manera de hacer un ejemplo práctico, generalmente en los papers que ajustan modelos de predicción suele mostrarse el conjunto de datos separados en “ajuste” y “prueba”. Para esto, el conjunto datos se dividió aleatoriamente en proporción 80:20. Luego para cada conjunto se calcularon algunas estadísticas en base a la variable atraso_llegada.\n\ndatos &lt;- datos %&gt;%  \n  mutate(conjunto = sample(c(\"train\",\"test\"), nrow(datos), replace = T, prob = c(0.8,0.2)))\n\ndatos_train &lt;- datos %&gt;% select(mes,aerolinea, conjunto, atraso_llegada) %&gt;% \n  filter(conjunto == \"train\") %&gt;% \n  group_by(mes, aerolinea) %&gt;% \n  summarise(n_train = n(), \n            min_llegada_train = min(atraso_llegada),\n            prom_llegada_train = mean(atraso_llegada),\n            max_llegada_train = max(atraso_llegada),\n            sd_llegada_train = sd(atraso_llegada)\n            ) %&gt;% \n  ungroup()\n\ndatos_test &lt;- datos %&gt;% select(mes,aerolinea, conjunto, atraso_llegada) %&gt;% \n  filter(conjunto == \"test\") %&gt;% \n  group_by(mes, aerolinea) %&gt;% \n  summarise(n_test = n(), \n            min_llegada_test = min(atraso_llegada),\n            prom_llegada_test = mean(atraso_llegada),\n            max_llegada_test = max(atraso_llegada),\n            sd_llegada_test = sd(atraso_llegada)\n            ) %&gt;% \n  ungroup()\n\nLuego en resumen se guardó la información a mostrar en la tabla.\n\nresumen &lt;- left_join(datos_train,datos_test) %&gt;% \n  mutate(mes = case_when(\n                      mes == 9 ~ \"Septiembre\",\n                      mes ==10 ~ \"Octubre\",\n                      mes ==11 ~ \"Noviembre\")) %&gt;% \n  left_join(aerolineas) %&gt;% \n  select(mes, nombre, everything(), - (aerolinea))\n\nPara mostrar la tabla en formato se utilizó la función kable() del paquete kableExtra. Por defecto el tipo de formato está en HTML. En los nombres de columnas se agregó &lt;br&gt; (salto de línea en HTML). Para agrupar filas se podría usar collapse_rows() según la variable mes."
  },
  {
    "objectID": "posts/tablas-estadisticas/index.html#html",
    "href": "posts/tablas-estadisticas/index.html#html",
    "title": "Mostrar tablas estadisticas con kableExtra",
    "section": "HTML",
    "text": "HTML\n\nlibrary(kableExtra) \nresumen %&gt;% select(-mes) %&gt;% \nkable( format = \"html\", \n       format.args = list(decimal.mark = ',', big.mark = \".\"),\n       col.names = ( c(\"Aerolínea\",\n                       rep(c(\"N\",\"Min.&lt;br&gt;*(minutos)*\",\n                             \"Media&lt;br&gt;*(minutos)*\",\n                             \"Max.&lt;br&gt;*(minutos)*\",\n                             \"D.E&lt;br&gt;*(minutos)*\"),\n                           2))), \n         digits = 1 , escape = F) %&gt;%\n  kable_styling(c(\"striped\"),font_size = 11) %&gt;% \n  add_header_above(header = c(\" \"=1, \n                              \"Conjunto entrenamiento (N=6.973)\" = 5,\n                              \"Conjunto prueba (N=1.715)\" = 5 ) ) %&gt;% \n  pack_rows(\"Septiembre\", 1, 3) %&gt;% \n  pack_rows(\"Octubre\", 4, 6) %&gt;% \n  pack_rows(\"Noviembre\", 7,9) %&gt;% \n   footnote(general = \"D.E: Desviación estandar.\",\n            footnote_as_chunk = F)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConjunto entrenamiento (N=6.973)\n\n\nConjunto prueba (N=1.715)\n\n\n\nAerolínea\nN\nMin.\n*(minutos)*\nMedia\n*(minutos)*\nMax.\n*(minutos)*\nD.E\n*(minutos)*\nN\nMin.\n*(minutos)*\nMedia\n*(minutos)*\nMax.\n*(minutos)*\nD.E\n*(minutos)*\n\n\n\n\nSeptiembre\n\n\nJetBlue Airways\n594\n1\n54,3\n396\n64,5\n154\n1\n40,9\n195\n43,2\n\n\nExpressJet Airlines Inc.\n734\n1\n49,5\n364\n55,9\n189\n1\n56,2\n444\n70,1\n\n\nUnited Air Lines Inc.\n563\n1\n51,6\n406\n70,5\n150\n1\n52,7\n373\n71,3\n\n\nOctubre\n\n\nJetBlue Airways\n551\n1\n36,2\n366\n43,6\n146\n1\n41,7\n335\n49,2\n\n\nExpressJet Airlines Inc.\n1.171\n1\n51,5\n318\n50,5\n289\n1\n51,7\n300\n48,4\n\n\nUnited Air Lines Inc.\n831\n1\n35,6\n288\n43,8\n242\n1\n33,9\n239\n38,7\n\n\nNoviembre\n\n\nJetBlue Airways\n622\n1\n35,9\n299\n37,3\n179\n1\n39,7\n217\n43,0\n\n\nExpressJet Airlines Inc.\n995\n1\n42,8\n334\n42,7\n244\n1\n42,0\n389\n44,0\n\n\nUnited Air Lines Inc.\n830\n1\n34,8\n346\n46,9\n204\n1\n38,1\n335\n49,2\n\n\n\nNote: \n\n\n\n\n\n\n\n\n\n\n\n\n D.E: Desviación estandar."
  },
  {
    "objectID": "posts/tablas-estadisticas/index.html#latex",
    "href": "posts/tablas-estadisticas/index.html#latex",
    "title": "Mostrar tablas estadisticas con kableExtra",
    "section": "Latex",
    "text": "Latex\nPara formato Latex se debe especificar en el argumento formato = \"latex\". Algunos argumentos son difentes, como en el caso de los saltos en líneas en los nombres:\n\nresumen %&gt;% select(-mes) %&gt;% \n kable( format.args = list(decimal.mark = ',', big.mark = \".\"),\n        digits = 2, \"latex\", booktabs= T, linesep=\"\", \n        escape = F, \n        caption = \"Resumen estadístico\",\n        col.names = linebreak( c(\"Aerolínea\",\n                       rep(c(\"N\",\"Min.\\n(minutos\",\n                             \"Media\\n(minutos)\",\n                             \"Max.\\n(minutos)\",\n                             \"D.E\\n(minutos)\"),\n                           2)))) %&gt;%\n  kable_styling(latex_options=\"scale_down\") %&gt;% \n  add_header_above(header = c(\" \"=1, \n                              \"Conjunto entrenamiento (N=6.973)\" = 5,\n                              \"Conjunto prueba (N=1.715)\" = 5 ) ) %&gt;% \n  pack_rows(\"Septiembre\", 1, 3) %&gt;% \n  pack_rows(\"Octubre\", 4, 6) %&gt;% \n  pack_rows(\"Noviembre\", 7,9) %&gt;% \n   footnote(symbol = \"D.E: Desviación estandar.\",\n            footnote_as_chunk = F)\n\n\n\n\nLa salida sería algo así:"
  },
  {
    "objectID": "posts/graficas-python/index.html",
    "href": "posts/graficas-python/index.html",
    "title": "Graficas en python con estilo",
    "section": "",
    "text": "Este es un post de prueba usando python:\n\nx = 1\ny = 2\nprint(x+y)\n\n3"
  },
  {
    "objectID": "posts/gif-terremotos/index.html",
    "href": "posts/gif-terremotos/index.html",
    "title": "probando 1",
    "section": "",
    "text": "probando 1"
  },
  {
    "objectID": "posts/python-plot-1/index.html",
    "href": "posts/python-plot-1/index.html",
    "title": "Transforma tus gráficos en Python: Técnicas para cambiar estilos y colores",
    "section": "",
    "text": "Hace algunos años\nEn este post trabajo\n\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n\nurl_1 = \"https://drive.google.com/file/d/1chBndOfQob4OY2lUsQPoe3bOZUiixjOa/view?usp=sharing\"\npath_1 = 'https://drive.google.com/uc?export=download&id='+url_1.split('/')[-2] \ndf_1 = pd.read_csv(path_1)\ndf_1.head()\n\n    Paises  Contagiados\n0   España       569457\n1    Chile      1088398\n2   Guinea      1302202\n3  Ecuador      1930001\n4    Rusia      2000091\n\n\n\ndf = pd.DataFrame.copy(df_1)\n\nf, ax = plt.subplots()\nsns.barplot(y = \"Paises\" , x = \"Contagiados\" , data = df ,\n            color = \"r\", alpha = .8)\n\nplt.show(ax)\n\n\n\n\n\n\n\n\n\ndf= df.sort_values(by=[\"Contagiados\"], ascending=False )\ndf[\"Contagiados\"] = df[\"Contagiados\"]/1000000\nx = df_1[\"Contagiados\"].sum()\ndf.head()\n\n     Paises  Contagiados\n19   México    10.327423\n18    Japón    10.248705\n17  Francia     9.776457\n16   Canadá     7.506864\n15    India     7.498847\n\n\n\nplt.rcParams['font.family'] = 'Segoe UI'\n#plt.rcParams['font.sans-serif'] = ['Arial']  # O cualquier fuente que prefieras\n\n# Crear la figura y los ejes\nfig, ax = plt.subplots(figsize=(15, 7), dpi=120) #editar tamaño del plot (está en gran tamaño para html)\n\n# cambiar fondo del plot\n#fig.patch.set_facecolor('#F5F5F5')  # Fondo exterior (alrededor del gráfico)\n#ax.set_facecolor('#F5F5F5')         # Fondo interior del gráfico\n\n# Crear la gráfica de barras\nsns.barplot(\n    y=\"Paises\",\n    x=\"Contagiados\",\n    data=df,\n    color=\"r\",\n    alpha=0.8,\n    ax=ax\n)\n\n# Configurar límites y etiquetas de los ejes\nax.set_xlim(0, 10.4)\n\n(0.0, 10.4)\n\nax.set_xlabel(\"Millones de contagios\", fontsize=14, color='#4D4D4D')\nax.set_ylabel(\"\", fontsize=0)\n\n# Ajustar el tamaño y color de las etiquetas del eje x e y\nax.tick_params(axis='y', labelsize=14, colors='#4D4D4D')\nax.tick_params(axis='x', labelsize=14, colors='#4D4D4D')\n\n\n# Eliminar ehes específicas\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# cambiar de color ejes específicas\nax.spines['bottom'].set_color('#4D4D4D') \nax.spines['left'].set_color('#4D4D4D') \n\n# Añadir etiquetas de valor a cada barra dentro de la barra al final\nfor patch in ax.patches:\n    width = patch.get_width()\n    y = patch.get_y() + patch.get_height() / 2\n    \n    # Convertir el número a string con coma como separador decimal\n    formatted_width = f'{width:.1f}'.replace('.', ',')\n    # Posicionar el texto ligeramente dentro de la barra\n    ax.text(\n        width - 0.1,  # Desplazamiento hacia la izquierda para estar dentro\n        y,\n        f'{formatted_width} M',  # Usar el valor con coma\n        ha='right',  # Alinear el texto a la derecha para que quede al final\n        va='center',\n        color=\"white\",\n        fontweight='bold',\n        fontsize=12\n    )\n\n# Añadir título principal\nplt.suptitle(\n    'Total de contagios por país',\n    y=0.98,\n    horizontalalignment='left',\n    x=0.01,\n    fontsize=24,\n    fontweight=\"bold\",\n    color='#4D4D4D'\n)\n\n# Añadir texto adicional con la suma total de contagiados\nax.text(\n    7, 19,\n    f'Total de contagios: {int(x):,}'.replace(',', '.'),\n    color='grey',\n    fontsize=20,\n    fontweight='bold'\n)\n\n\nplt.tight_layout() #para ajustar el plot opupar el espacio\n\nplt.show()"
  },
  {
    "objectID": "posts/python-plot-1/index.html#hola-2",
    "href": "posts/python-plot-1/index.html#hola-2",
    "title": "Transforma tus gráficos en Python: Técnicas para cambiar estilos y colores",
    "section": "",
    "text": "asdads"
  },
  {
    "objectID": "posts/python-plot-1/index.html#hola-3",
    "href": "posts/python-plot-1/index.html#hola-3",
    "title": "Transforma tus gráficos en Python: Técnicas para cambiar estilos y colores",
    "section": "",
    "text": "asdasd\nEn este post trabajo\n\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\n\nurl_1 = \"https://drive.google.com/file/d/1chBndOfQob4OY2lUsQPoe3bOZUiixjOa/view?usp=sharing\"\npath_1 = 'https://drive.google.com/uc?export=download&id='+url_1.split('/')[-2] \ndf_1 = pd.read_csv(path_1)\ndf_1.head()\n\n    Paises  Contagiados\n0   España       569457\n1    Chile      1088398\n2   Guinea      1302202\n3  Ecuador      1930001\n4    Rusia      2000091\n\n\n\ndf = pd.DataFrame.copy(df_1)\n\nf, ax = plt.subplots()\nsns.barplot(y = \"Paises\" , x = \"Contagiados\" , data = df ,\n            color = \"r\", alpha = .8)\n\nplt.show(ax)\n\n\n\n\n\n\n\n\n\ndf= df.sort_values(by=[\"Contagiados\"], ascending=False )\ndf[\"Contagiados\"] = df[\"Contagiados\"]/1000000\nx = df_1[\"Contagiados\"].sum()\ndf.head()\n\n     Paises  Contagiados\n19   México    10.327423\n18    Japón    10.248705\n17  Francia     9.776457\n16   Canadá     7.506864\n15    India     7.498847\n\n\n\nplt.rcParams['font.family'] = 'Segoe UI'\n#plt.rcParams['font.sans-serif'] = ['Arial']  # O cualquier fuente que prefieras\n\n# Crear la figura y los ejes\nfig, ax = plt.subplots(figsize=(15, 7), dpi=120) #editar tamaño del plot (está en gran tamaño para html)\n\n# cambiar fondo del plot\n#fig.patch.set_facecolor('#F5F5F5')  # Fondo exterior (alrededor del gráfico)\n#ax.set_facecolor('#F5F5F5')         # Fondo interior del gráfico\n\n# Crear la gráfica de barras\nsns.barplot(\n    y=\"Paises\",\n    x=\"Contagiados\",\n    data=df,\n    color=\"r\",\n    alpha=0.8,\n    ax=ax\n)\n\n# Configurar límites y etiquetas de los ejes\nax.set_xlim(0, 10.4)\n\n(0.0, 10.4)\n\nax.set_xlabel(\"Millones de contagios\", fontsize=14, color='#4D4D4D')\nax.set_ylabel(\"\", fontsize=0)\n\n# Ajustar el tamaño y color de las etiquetas del eje x e y\nax.tick_params(axis='y', labelsize=14, colors='#4D4D4D')\nax.tick_params(axis='x', labelsize=14, colors='#4D4D4D')\n\n\n# Eliminar ehes específicas\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\n\n# cambiar de color ejes específicas\nax.spines['bottom'].set_color('#4D4D4D') \nax.spines['left'].set_color('#4D4D4D') \n\n# Añadir etiquetas de valor a cada barra dentro de la barra al final\nfor patch in ax.patches:\n    width = patch.get_width()\n    y = patch.get_y() + patch.get_height() / 2\n    \n    # Convertir el número a string con coma como separador decimal\n    formatted_width = f'{width:.1f}'.replace('.', ',')\n    # Posicionar el texto ligeramente dentro de la barra\n    ax.text(\n        width - 0.1,  # Desplazamiento hacia la izquierda para estar dentro\n        y,\n        f'{formatted_width} M',  # Usar el valor con coma\n        ha='right',  # Alinear el texto a la derecha para que quede al final\n        va='center',\n        color=\"white\",\n        fontweight='bold',\n        fontsize=12\n    )\n\n# Añadir título principal\nplt.suptitle(\n    'Total de contagios por país',\n    y=0.98,\n    horizontalalignment='left',\n    x=0.01,\n    fontsize=24,\n    fontweight=\"bold\",\n    color='#4D4D4D'\n)\n\n# Añadir texto adicional con la suma total de contagiados\nax.text(\n    7, 19,\n    f'Total de contagios: {int(x):,}'.replace(',', '.'),\n    color='grey',\n    fontsize=20,\n    fontweight='bold'\n)\n\n\nplt.tight_layout() #para ajustar el plot opupar el espacio\n\nplt.show()"
  }
]